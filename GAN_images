import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import mnist
from keras.layers import Input, Dense, Reshape, Flatten, BatchNormalization, LeakyReLU
from keras.models import Sequential, Model
from keras.optimizers import Adam
import streamlit as st
import os
import ssl

# Fix SSL error for MNIST
ssl._create_default_https_context = ssl._create_unverified_context

# Load dataset
(X_train, _), (_, _) = mnist.load_data()

# Normalize and reshape
X_train = (X_train.astype(np.float32) - 127.5) / 127.5
X_train = np.expand_dims(X_train, axis=3)

# Generator
def build_generator():
    model = Sequential()
    model.add(Dense(256, input_dim=100))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))
    model.add(Dense(512))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))
    model.add(Dense(1024))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))
    model.add(Dense(784, activation='tanh'))
    model.add(Reshape((28, 28, 1)))
    return model

# Discriminator
def build_discriminator():
    model = Sequential()
    model.add(Flatten(input_shape=(28, 28, 1)))
    model.add(Dense(512))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dense(256))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dense(1, activation='sigmoid'))
    return model

# Build and compile models
generator = build_generator()
discriminator = build_discriminator()
discriminator.compile(optimizer=Adam(0.0002, 0.5), loss='binary_crossentropy', metrics=['accuracy'])

# Build combined GAN
discriminator.trainable = False
gan_input = Input(shape=(100,))
generated_image = generator(gan_input)
gan_output = discriminator(generated_image)
gan = Model(gan_input, gan_output)
gan.compile(optimizer=Adam(0.0002, 0.5), loss='binary_crossentropy')

# Function to train GAN
def train_gan(epochs, batch_size=128):
    real = np.ones((batch_size, 1))
    fake = np.zeros((batch_size, 1))
    
    for epoch in range(epochs):
        idx = np.random.randint(0, X_train.shape[0], batch_size)
        real_images = X_train[idx]
        
        noise = np.random.normal(0, 1, (batch_size, 100))
        generated_images = generator.predict(noise)
        
        d_loss_real = discriminator.train_on_batch(real_images, real)
        d_loss_fake = discriminator.train_on_batch(generated_images, fake)
        d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)
        
        noise = np.random.normal(0, 1, (batch_size, 100))
        g_loss = gan.train_on_batch(noise, real)
        
        if epoch % 100 == 0:
            print(f"{epoch} [D loss: {d_loss[0]}, acc.: {100*d_loss[1]:.2f}] [G loss: {g_loss:.4f}]")
    
    generator.save_weights("generator_weights.h5")

# Streamlit UI
st.set_page_config(page_title="MNIST GAN Generator", layout="centered")
st.title("üß† GAN Digit Generator with Streamlit")

# Option to train
if st.button("üîÅ Train GAN (1000 epochs)"):
    with st.spinner("Training GAN..."):
        train_gan(epochs=1000, batch_size=64)
    st.success("‚úÖ Training complete and weights saved!")

# Load generator weights if available
if os.path.exists("generator_weights.h5"):
    generator.load_weights("generator_weights.h5")
    st.success("‚úÖ Generator weights loaded.")
else:
    st.warning("‚ö†Ô∏è No saved generator weights found. Please train the GAN first.")

# Generate images
st.markdown("### üé® Generate Digits")
num_images = st.slider("Select number of digits", 1, 25, 9)

if st.button("Generate"):
    noise = np.random.normal(0, 1, (num_images, 100))
    generated_images = generator.predict(noise)
    generated_images = 0.5 * generated_images + 0.5  # Rescale to [0,1]
    
    cols = st.columns(5)
    for i in range(num_images):
        with cols[i % 5]:
            st.image(generated_images[i, :, :, 0], width=100, caption=f"Digit {i+1}")
